// Code authored by SHIVAM GUPTA

// HINT : 
// Traverse the list making one more head for even elements.
// Also put connect odd in original and even in new linked list.
// At last connect odd end to even head.

// Time Complexity : O(n)
// Space Complexity : O(1)

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        if (head == NULL) return head;
        ListNode *odd = head, *even = head->next, *evenHead=even;
        while(even!=NULL && even->next!=NULL){
            odd->next=even->next;
            odd = even->next;
            even->next=odd->next;
            even = even->next;
        }
        odd->next=evenHead;
        return head;
    }
};