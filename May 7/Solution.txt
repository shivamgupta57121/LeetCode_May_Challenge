// Code authored by SHIVAM GUPTA

// HINT : Use Recursion


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:
    unordered_map<int,pair<int,int>> dep;
    void depth(TreeNode* root, int d, int p){
        if(root == NULL) return;
        dep[root->val]=make_pair(d,p);
        depth(root->left,d+1,root->val);
        depth(root->right,d+1,root->val);
    }
    
    bool isCousins(TreeNode* root, int x, int y) {
        depth(root,0,0);
        cout<<dep[x].first<<" "<<dep[y].first<<endl;
        cout<<dep[x].second<<" "<<dep[y].second;
        if(dep[x].first==dep[y].first && dep[x].second!=dep[y].second) return true;
        return false;
    }
};