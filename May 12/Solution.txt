// Code authored by SHIVAM GUPTA

// HINT : Use Binary Search 
// Time Complexity : O(log(n))

class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int n = nums.size();
        int start = 0, end = n-1, mid;
        while(start<end){
            mid = (start+end)/2;
            if(nums[mid]==nums[mid^1]) // checks with next if mid is even, prev if odd
                start=mid+1;
            else end=mid;
        }
        return nums[start];
    }
};